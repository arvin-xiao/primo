package ${package.QueryBo};

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import ${package.Entity}.${entity};
#if(${table.hasDate})
import java.util.Date;
#end
##添加了List功能
import java.util.List;

##BigDecimal导入
#foreach($field in ${table.fields})
	#if(${field.propertyType.equals('BigDecimal')})
	import java.math.BigDecimal;
		#break
	#end
#end

/**
 * <p>
 * ${table.comment}
 * 查询条件类
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
public class ${table.queryName}{
	/**
	 * 排序，批量查询
	 */
	private QueryBoExt queryBoExt;
	/**
	 * 模糊查询
	 */
	private List<QueryBoFuzzy> queryBoFuzzyList;
#foreach($field in ${table.fields})
	/**
	 * ${field.comment}
	 */
	private ${field.propertyType} ${field.propertyName};

#end

	/**
	 * 构建查询
	 * @return
	 */
	public QueryWrapper<${entity}> buildQuery() {
		QueryWrapper<${entity}> query = new QueryWrapper<>();

	#foreach($field in ${table.fields})
	if(${field.propertyName}!=null){
			query.eq(${entity}.${field.nameUp},${field.propertyName});
		}
	#end

		//模糊查询
		if(queryBoFuzzyList!=null && queryBoFuzzyList.size()>0){
			for (QueryBoFuzzy queryBoFuzzy : queryBoFuzzyList) {
				if(queryBoFuzzy.getValue()==null || queryBoFuzzy.getValue().trim().length()==0){
					continue;
				}
				query.or(blogsQueryWrapper -> {
					blogsQueryWrapper.like(queryBoFuzzy.getColumn(),queryBoFuzzy.getValue().trim());
				});
			}
		}
		if(queryBoExt!=null){
			//设置排序
			if(queryBoExt.getOrderColumn()!=null && queryBoExt.getOrderColumn().trim().length()>0 ){
				if(queryBoExt.isAsc()){
					query.orderByAsc(queryBoExt.getOrderColumn());
				}else{
					query.orderByDesc(queryBoExt.getOrderColumn());
				}
			}
			//批量的查询条件进行查询
            #foreach($field in ${table.fields})
            if(queryBoExt.get${field.capitalName}List()!=null && queryBoExt.get${field.capitalName}List().size()>0){
                query.in(${entity}.${field.nameUp},queryBoExt.get${field.capitalName}List());
            }
            #end
		}
		return query;
	}

#foreach($field in ${table.fields})
	#if(${field.propertyType.equals("Boolean")})
		#set($getprefix="is")
	#else
		#set($getprefix="get")
	#end

	public ${field.propertyType} ${getprefix}${field.capitalName}() {
        return ${field.propertyName};
	}

	public void set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
        this.${field.propertyName} = ${field.propertyName};
    }
#end


	public List<QueryBoFuzzy> getQueryBoFuzzyList() {
		return queryBoFuzzyList;
	}

	public void setQueryBoFuzzyList(List<QueryBoFuzzy> queryBoFuzzyList) {
		this.queryBoFuzzyList = queryBoFuzzyList;
	}

	public QueryBoExt getQueryBoExt() {
		return queryBoExt;
	}

	public void setQueryBoExt(QueryBoExt queryBoExt) {
		this.queryBoExt = queryBoExt;
	}

	/**
	* 模糊查询的字段 - 注意，是全模糊
	*/
	public static class QueryBoFuzzy {
		/**
		 * 字符名称 - 数据库的
		 */
		private String column;
		/**
		 * 值
		 */
		private String value;

		public String getColumn() {
			return column;
		}

		public void setColumn(String column) {
			this.column = column;
		}

		public String getValue() {
			return value;
		}

		public void setValue(String value) {
			this.value = value;
		}

		@Override
		public String toString() {
			final StringBuilder sb = new StringBuilder("QueryBoFuzzy{");
			sb.append(super.toString());
			sb.append(",");
			sb.append("                column='").append(column).append('\'');
			sb.append(",                 value='").append(value).append('\'');
			sb.append('}');
			return sb.toString();
		}
	}
    /**
    * 用于排序，和批量的查询
    */
    public static class QueryBoExt {
		/**
		 * 一般情况下只需要单个列的排序
		 */
		private String orderColumn;

		/**
		 * 默认正序
		 */
		private boolean asc = true;

		#foreach($field in ${table.fields})
        /**
         * ${field.comment}
         * 集合
         */
        private List<${field.propertyType}> ${field.propertyName}List;
		#end


        #foreach($field in ${table.fields})
        public List<${field.propertyType}> get${field.capitalName}List() {
            return ${field.propertyName}List;
        }

        public void set${field.capitalName}List(List<${field.propertyType}> ${field.propertyName}List) {
            this.${field.propertyName}List = ${field.propertyName}List;
        }
        #end

        public String getOrderColumn() {
			return orderColumn;
		}

		public void setOrderColumn(String orderColumn) {
			this.orderColumn = orderColumn;
		}

		public boolean isAsc() {
			return asc;
		}

		public void setAsc(boolean asc) {
			this.asc = asc;
		}
	}


}
